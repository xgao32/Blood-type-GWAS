renv::install("caret")
```
# set directory
if (dir.exists("/hpctmp/xgao32/Blood-type-GWAS/biobank/1KG/phase3_grch37/")) {
    # Set the working directory
    setwd("/hpctmp/xgao32/Blood-type-GWAS/biobank/1KG/phase3_grch37/")
    } else {
    setwd("/workspaces/Blood-type-GWAS/biobank/1KG/phase3_grch37/")
    }
library(caret)
load(".Rdata")
getwd()
load(".RData")
ls()
head(df_genotype)
df_genotype[`2666384`]
df_genotype$2666384
df_genotype$`2666384`
summary(df_genotype)
aggregate(df_genotype,by = list(df_genotype$`2666384`),FUN = table)
?naive_bayes
library(naivebayes)
renv::install("naivebayes")
library(naivebayes)
set.seed(0)
# partition data
sub <- createDataPartition(y = DM_bcs$Amount, p = 0.80, list = FALSE)
# partition data
sub <- createDataPartition(y = df_genotype$`2666384`, p = 0.80, list = FALSE)
sub
.vsc.attach()
# partition data
sub <- createDataPartition(y = df_genotype$`2666384`, p = 0.80, list = FALSE)
df_train <- df_genotype[sub,]
df_test <- df_genotype[-sub,]
# train model on all other
nb_mod <- naive_bayes(`2666384` ~ ., df_train, laplace=0)
# change all entries from character to factor type 
df_genotype[] <- lapply(df_genotype, as.factor)
df_genotype[1,]
df_genotype[,1]
df_genotype[1,1]
df_genotype[1,2]
df_genotype[1,1:5]
# summary statistics to see frequency of alleles
summary(df_genotype)
# check for class with 0 counts to decide if laplace smoothing is needed
aggregate(df_genotype,by = list(df_genotype$`2666384`),FUN = table)
# partition data
sub <- createDataPartition(y = df_genotype$`2666384`, p = 0.80, list = FALSE)
df_train <- df_genotype[sub,]
df_test <- df_genotype[-sub,]
# train model on all other
nb_mod <- naive_bayes(`2666384` ~ ., df_train, laplace=0)
summary(nb_mod)
# performance on training set
nb_train_perf <- predict(object = nb_mod, # NB model
                    newdata = df_train, # predictors
                    type = "class")
# performance on training set
nb_train_perf <- predict(object = nb_mod, # NB model
                    newdata =  subset(df_train, select = -`2666384`), # predictors
                    type = "class")
train_conf <- confusionMatrix(data = nb_train_perf, # predictions
                                reference = df_train$`2666384`, # actual
                                positive = "0",
                                mode = "everything")
train_conf
# test set
# performance on training set
nb_test_perf <- predict(object = nb_mod, # NB model
                    newdata =  subset(df_test, select = -`2666384`), # predictors
                    type = "class")
test_conf <- confusionMatrix(data = nb_test_perf, # predictions
                                reference = df_test$`2666384`, # mask target variable in training set
                                positive = "0",
                                mode = "everything")
test_conf
save.image()
q()
